### YamlMime:ManagedReference
items:
- uid: QFramework.FuncOrActionOrEventExtension
  commentId: T:QFramework.FuncOrActionOrEventExtension
  id: FuncOrActionOrEventExtension
  parent: QFramework
  children:
  - QFramework.FuncOrActionOrEventExtension.InvokeGracefully(System.Action)
  - QFramework.FuncOrActionOrEventExtension.InvokeGracefully(System.Delegate,System.Object[])
  - QFramework.FuncOrActionOrEventExtension.InvokeGracefully``1(System.Action{``0},``0)
  - QFramework.FuncOrActionOrEventExtension.InvokeGracefully``1(System.Func{``0})
  - QFramework.FuncOrActionOrEventExtension.InvokeGracefully``2(System.Action{``0,``1},``0,``1)
  langs:
  - csharp
  - vb
  name: FuncOrActionOrEventExtension
  nameWithType: FuncOrActionOrEventExtension
  fullName: QFramework.FuncOrActionOrEventExtension
  type: Class
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: FuncOrActionOrEventExtension
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 84
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\nFunc、Action、delegate 的扩展\n"
  example: []
  syntax:
    content: public static class FuncOrActionOrEventExtension
    content.vb: Public Module FuncOrActionOrEventExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: QFramework.FuncOrActionOrEventExtension.InvokeGracefully``1(System.Func{``0})
  commentId: M:QFramework.FuncOrActionOrEventExtension.InvokeGracefully``1(System.Func{``0})
  id: InvokeGracefully``1(System.Func{``0})
  isExtensionMethod: true
  parent: QFramework.FuncOrActionOrEventExtension
  langs:
  - csharp
  - vb
  name: InvokeGracefully<T>(Func<T>)
  nameWithType: FuncOrActionOrEventExtension.InvokeGracefully<T>(Func<T>)
  fullName: QFramework.FuncOrActionOrEventExtension.InvokeGracefully<T>(System.Func<T>)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: InvokeGracefully
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 99
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  syntax:
    content: public static T InvokeGracefully<T>(this Func<T> selfFunc)
    parameters:
    - id: selfFunc
      type: System.Func{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InvokeGracefully(Of T)(selfFunc As Func(Of T)) As T
  overload: QFramework.FuncOrActionOrEventExtension.InvokeGracefully*
  nameWithType.vb: FuncOrActionOrEventExtension.InvokeGracefully(Of T)(Func(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: QFramework.FuncOrActionOrEventExtension.InvokeGracefully(Of T)(System.Func(Of T))
  name.vb: InvokeGracefully(Of T)(Func(Of T))
- uid: QFramework.FuncOrActionOrEventExtension.InvokeGracefully(System.Action)
  commentId: M:QFramework.FuncOrActionOrEventExtension.InvokeGracefully(System.Action)
  id: InvokeGracefully(System.Action)
  isExtensionMethod: true
  parent: QFramework.FuncOrActionOrEventExtension
  langs:
  - csharp
  - vb
  name: InvokeGracefully(Action)
  nameWithType: FuncOrActionOrEventExtension.InvokeGracefully(Action)
  fullName: QFramework.FuncOrActionOrEventExtension.InvokeGracefully(System.Action)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: InvokeGracefully
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 118
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n功能：不为空则调用 Action\n示例:\n<pre><code>System.Action action = () => Log.I(&quot;action called&quot;);\naction.InvokeGracefully(); // if (action != null) action();</code></pre>\n"
  example: []
  syntax:
    content: public static bool InvokeGracefully(this Action selfAction)
    parameters:
    - id: selfAction
      type: System.Action
      description: 'action 对象 '
    return:
      type: System.Boolean
      description: '是否调用成功 '
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InvokeGracefully(selfAction As Action) As Boolean
  overload: QFramework.FuncOrActionOrEventExtension.InvokeGracefully*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: QFramework.FuncOrActionOrEventExtension.InvokeGracefully``1(System.Action{``0},``0)
  commentId: M:QFramework.FuncOrActionOrEventExtension.InvokeGracefully``1(System.Action{``0},``0)
  id: InvokeGracefully``1(System.Action{``0},``0)
  isExtensionMethod: true
  parent: QFramework.FuncOrActionOrEventExtension
  langs:
  - csharp
  - vb
  name: InvokeGracefully<T>(Action<T>, T)
  nameWithType: FuncOrActionOrEventExtension.InvokeGracefully<T>(Action<T>, T)
  fullName: QFramework.FuncOrActionOrEventExtension.InvokeGracefully<T>(System.Action<T>, T)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: InvokeGracefully
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 139
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  syntax:
    content: public static bool InvokeGracefully<T>(this Action<T> selfAction, T t)
    parameters:
    - id: selfAction
      type: System.Action{{T}}
    - id: t
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InvokeGracefully(Of T)(selfAction As Action(Of T), t As T) As Boolean
  overload: QFramework.FuncOrActionOrEventExtension.InvokeGracefully*
  nameWithType.vb: FuncOrActionOrEventExtension.InvokeGracefully(Of T)(Action(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: QFramework.FuncOrActionOrEventExtension.InvokeGracefully(Of T)(System.Action(Of T), T)
  name.vb: InvokeGracefully(Of T)(Action(Of T), T)
- uid: QFramework.FuncOrActionOrEventExtension.InvokeGracefully``2(System.Action{``0,``1},``0,``1)
  commentId: M:QFramework.FuncOrActionOrEventExtension.InvokeGracefully``2(System.Action{``0,``1},``0,``1)
  id: InvokeGracefully``2(System.Action{``0,``1},``0,``1)
  isExtensionMethod: true
  parent: QFramework.FuncOrActionOrEventExtension
  langs:
  - csharp
  - vb
  name: InvokeGracefully<T, K>(Action<T, K>, T, K)
  nameWithType: FuncOrActionOrEventExtension.InvokeGracefully<T, K>(Action<T, K>, T, K)
  fullName: QFramework.FuncOrActionOrEventExtension.InvokeGracefully<T, K>(System.Action<T, K>, T, K)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: InvokeGracefully
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 158
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  syntax:
    content: public static bool InvokeGracefully<T, K>(this Action<T, K> selfAction, T t, K k)
    parameters:
    - id: selfAction
      type: System.Action{{T},{K}}
    - id: t
      type: '{T}'
    - id: k
      type: '{K}'
    typeParameters:
    - id: T
    - id: K
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InvokeGracefully(Of T, K)(selfAction As Action(Of T, K), t As T, k As K) As Boolean
  overload: QFramework.FuncOrActionOrEventExtension.InvokeGracefully*
  nameWithType.vb: FuncOrActionOrEventExtension.InvokeGracefully(Of T, K)(Action(Of T, K), T, K)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: QFramework.FuncOrActionOrEventExtension.InvokeGracefully(Of T, K)(System.Action(Of T, K), T, K)
  name.vb: InvokeGracefully(Of T, K)(Action(Of T, K), T, K)
- uid: QFramework.FuncOrActionOrEventExtension.InvokeGracefully(System.Delegate,System.Object[])
  commentId: M:QFramework.FuncOrActionOrEventExtension.InvokeGracefully(System.Delegate,System.Object[])
  id: InvokeGracefully(System.Delegate,System.Object[])
  isExtensionMethod: true
  parent: QFramework.FuncOrActionOrEventExtension
  langs:
  - csharp
  - vb
  name: InvokeGracefully(Delegate, Object[])
  nameWithType: FuncOrActionOrEventExtension.InvokeGracefully(Delegate, Object[])
  fullName: QFramework.FuncOrActionOrEventExtension.InvokeGracefully(System.Delegate, System.Object[])
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: InvokeGracefully
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 178
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n不为空则调用委托\n<pre><code>// delegate\nTestDelegate testDelegate = () => { };\ntestDelegate.InvokeGracefully();</code></pre>\n"
  example: []
  syntax:
    content: public static bool InvokeGracefully(this Delegate selfAction, params object[] args)
    parameters:
    - id: selfAction
      type: System.Delegate
      description: ''
    - id: args
      type: System.Object[]
    return:
      type: System.Boolean
      description: 'call suceed '
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InvokeGracefully(selfAction As  Delegate, ParamArray args As Object()) As Boolean
  overload: QFramework.FuncOrActionOrEventExtension.InvokeGracefully*
  nameWithType.vb: FuncOrActionOrEventExtension.InvokeGracefully(Delegate, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: QFramework.FuncOrActionOrEventExtension.InvokeGracefully(System.Delegate, System.Object())
  name.vb: InvokeGracefully(Delegate, Object())
references:
- uid: QFramework
  commentId: N:QFramework
  name: QFramework
  nameWithType: QFramework
  fullName: QFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: QFramework.FuncOrActionOrEventExtension.InvokeGracefully*
  commentId: Overload:QFramework.FuncOrActionOrEventExtension.InvokeGracefully
  name: InvokeGracefully
  nameWithType: FuncOrActionOrEventExtension.InvokeGracefully
  fullName: QFramework.FuncOrActionOrEventExtension.InvokeGracefully
- uid: System.Func{{T}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullName.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Action{{T}}
  commentId: T:System.Action{``0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T},{K}}
  commentId: T:System.Action{``0,``1}
  parent: System
  definition: System.Action`2
  name: Action<T, K>
  nameWithType: Action<T, K>
  fullName: System.Action<T, K>
  nameWithType.vb: Action(Of T, K)
  fullName.vb: System.Action(Of T, K)
  name.vb: Action(Of T, K)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: K
    nameWithType: K
    fullName: K
  - name: )
    nameWithType: )
    fullName: )
- uid: '{K}'
  commentId: '!:K'
  definition: K
  name: K
  nameWithType: K
  fullName: K
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: K
  commentId: '!:K'
  name: K
  nameWithType: K
  fullName: K
- uid: System.Delegate
  commentId: T:System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
