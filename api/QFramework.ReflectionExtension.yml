### YamlMime:ManagedReference
items:
- uid: QFramework.ReflectionExtension
  commentId: T:QFramework.ReflectionExtension
  id: ReflectionExtension
  parent: QFramework
  children:
  - QFramework.ReflectionExtension.Example
  - QFramework.ReflectionExtension.GetAssemblyCSharp
  - QFramework.ReflectionExtension.GetAssemblyCSharpEditor
  - QFramework.ReflectionExtension.GetFieldByReflect(System.Object,System.String)
  - QFramework.ReflectionExtension.GetFirstAttribute``1(System.Reflection.FieldInfo,System.Boolean)
  - QFramework.ReflectionExtension.GetFirstAttribute``1(System.Reflection.MethodInfo,System.Boolean)
  - QFramework.ReflectionExtension.GetFirstAttribute``1(System.Reflection.PropertyInfo,System.Boolean)
  - QFramework.ReflectionExtension.GetFirstAttribute``1(System.Type,System.Boolean)
  - QFramework.ReflectionExtension.GetPropertyByReflect(System.Object,System.String,System.Object[])
  - QFramework.ReflectionExtension.HasAttribute(System.Reflection.FieldInfo,System.Type,System.Boolean)
  - QFramework.ReflectionExtension.HasAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)
  - QFramework.ReflectionExtension.HasAttribute(System.Reflection.PropertyInfo,System.Type,System.Boolean)
  - QFramework.ReflectionExtension.HasAttribute(System.Type,System.Type,System.Boolean)
  - QFramework.ReflectionExtension.InvokeByReflect(System.Object,System.String,System.Object[])
  langs:
  - csharp
  - vb
  name: ReflectionExtension
  nameWithType: ReflectionExtension
  fullName: QFramework.ReflectionExtension
  type: Class
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: ReflectionExtension
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 889
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n反射扩展\n"
  example: []
  syntax:
    content: public static class ReflectionExtension
    content.vb: Public Module ReflectionExtension
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: QFramework.ReflectionExtension.Example
  commentId: M:QFramework.ReflectionExtension.Example
  id: Example
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: Example()
  nameWithType: ReflectionExtension.Example()
  fullName: QFramework.ReflectionExtension.Example()
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: Example
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 891
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  syntax:
    content: public static void Example()
    content.vb: Public Shared Sub Example
  overload: QFramework.ReflectionExtension.Example*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: QFramework.ReflectionExtension.GetAssemblyCSharp
  commentId: M:QFramework.ReflectionExtension.GetAssemblyCSharp
  id: GetAssemblyCSharp
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: GetAssemblyCSharp()
  nameWithType: ReflectionExtension.GetAssemblyCSharp()
  fullName: QFramework.ReflectionExtension.GetAssemblyCSharp()
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: GetAssemblyCSharp
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 897
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  syntax:
    content: public static Assembly GetAssemblyCSharp()
    return:
      type: System.Reflection.Assembly
    content.vb: Public Shared Function GetAssemblyCSharp As Assembly
  overload: QFramework.ReflectionExtension.GetAssemblyCSharp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: QFramework.ReflectionExtension.GetAssemblyCSharpEditor
  commentId: M:QFramework.ReflectionExtension.GetAssemblyCSharpEditor
  id: GetAssemblyCSharpEditor
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: GetAssemblyCSharpEditor()
  nameWithType: ReflectionExtension.GetAssemblyCSharpEditor()
  fullName: QFramework.ReflectionExtension.GetAssemblyCSharpEditor()
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: GetAssemblyCSharpEditor
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 912
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  syntax:
    content: public static Assembly GetAssemblyCSharpEditor()
    return:
      type: System.Reflection.Assembly
    content.vb: Public Shared Function GetAssemblyCSharpEditor As Assembly
  overload: QFramework.ReflectionExtension.GetAssemblyCSharpEditor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: QFramework.ReflectionExtension.InvokeByReflect(System.Object,System.String,System.Object[])
  commentId: M:QFramework.ReflectionExtension.InvokeByReflect(System.Object,System.String,System.Object[])
  id: InvokeByReflect(System.Object,System.String,System.Object[])
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: InvokeByReflect(Object, String, Object[])
  nameWithType: ReflectionExtension.InvokeByReflect(Object, String, Object[])
  fullName: QFramework.ReflectionExtension.InvokeByReflect(System.Object, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: InvokeByReflect
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 934
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n通过反射方式调用函数\n"
  example: []
  syntax:
    content: public static object InvokeByReflect(this object obj, string methodName, params object[] args)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    - id: methodName
      type: System.String
      description: 方法名
    - id: args
      type: System.Object[]
      description: 参数
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InvokeByReflect(obj As Object, methodName As String, ParamArray args As Object()) As Object
  overload: QFramework.ReflectionExtension.InvokeByReflect*
  nameWithType.vb: ReflectionExtension.InvokeByReflect(Object, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: QFramework.ReflectionExtension.InvokeByReflect(System.Object, System.String, System.Object())
  name.vb: InvokeByReflect(Object, String, Object())
- uid: QFramework.ReflectionExtension.GetFieldByReflect(System.Object,System.String)
  commentId: M:QFramework.ReflectionExtension.GetFieldByReflect(System.Object,System.String)
  id: GetFieldByReflect(System.Object,System.String)
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: GetFieldByReflect(Object, String)
  nameWithType: ReflectionExtension.GetFieldByReflect(Object, String)
  fullName: QFramework.ReflectionExtension.GetFieldByReflect(System.Object, System.String)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: GetFieldByReflect
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 946
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n通过反射方式获取域值\n"
  example: []
  syntax:
    content: public static object GetFieldByReflect(this object obj, string fieldName)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    - id: fieldName
      type: System.String
      description: 域名
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFieldByReflect(obj As Object, fieldName As String) As Object
  overload: QFramework.ReflectionExtension.GetFieldByReflect*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: QFramework.ReflectionExtension.GetPropertyByReflect(System.Object,System.String,System.Object[])
  commentId: M:QFramework.ReflectionExtension.GetPropertyByReflect(System.Object,System.String,System.Object[])
  id: GetPropertyByReflect(System.Object,System.String,System.Object[])
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: GetPropertyByReflect(Object, String, Object[])
  nameWithType: ReflectionExtension.GetPropertyByReflect(Object, String, Object[])
  fullName: QFramework.ReflectionExtension.GetPropertyByReflect(System.Object, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: GetPropertyByReflect
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 958
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n通过反射方式获取属性\n"
  example: []
  syntax:
    content: public static object GetPropertyByReflect(this object obj, string propertyName, object[] index = null)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    - id: propertyName
      type: System.String
    - id: index
      type: System.Object[]
    return:
      type: System.Object
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPropertyByReflect(obj As Object, propertyName As String, index As Object() = Nothing) As Object
  overload: QFramework.ReflectionExtension.GetPropertyByReflect*
  nameWithType.vb: ReflectionExtension.GetPropertyByReflect(Object, String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: QFramework.ReflectionExtension.GetPropertyByReflect(System.Object, System.String, System.Object())
  name.vb: GetPropertyByReflect(Object, String, Object())
- uid: QFramework.ReflectionExtension.HasAttribute(System.Reflection.PropertyInfo,System.Type,System.Boolean)
  commentId: M:QFramework.ReflectionExtension.HasAttribute(System.Reflection.PropertyInfo,System.Type,System.Boolean)
  id: HasAttribute(System.Reflection.PropertyInfo,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: HasAttribute(PropertyInfo, Type, Boolean)
  nameWithType: ReflectionExtension.HasAttribute(PropertyInfo, Type, Boolean)
  fullName: QFramework.ReflectionExtension.HasAttribute(System.Reflection.PropertyInfo, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: HasAttribute
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 968
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n拥有特性\n"
  example: []
  syntax:
    content: public static bool HasAttribute(this PropertyInfo prop, Type attributeType, bool inherit)
    parameters:
    - id: prop
      type: System.Reflection.PropertyInfo
    - id: attributeType
      type: System.Type
    - id: inherit
      type: System.Boolean
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasAttribute(prop As PropertyInfo, attributeType As Type, inherit As Boolean) As Boolean
  overload: QFramework.ReflectionExtension.HasAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: QFramework.ReflectionExtension.HasAttribute(System.Reflection.FieldInfo,System.Type,System.Boolean)
  commentId: M:QFramework.ReflectionExtension.HasAttribute(System.Reflection.FieldInfo,System.Type,System.Boolean)
  id: HasAttribute(System.Reflection.FieldInfo,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: HasAttribute(FieldInfo, Type, Boolean)
  nameWithType: ReflectionExtension.HasAttribute(FieldInfo, Type, Boolean)
  fullName: QFramework.ReflectionExtension.HasAttribute(System.Reflection.FieldInfo, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: HasAttribute
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 977
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n拥有特性\n"
  example: []
  syntax:
    content: public static bool HasAttribute(this FieldInfo field, Type attributeType, bool inherit)
    parameters:
    - id: field
      type: System.Reflection.FieldInfo
    - id: attributeType
      type: System.Type
    - id: inherit
      type: System.Boolean
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasAttribute(field As FieldInfo, attributeType As Type, inherit As Boolean) As Boolean
  overload: QFramework.ReflectionExtension.HasAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: QFramework.ReflectionExtension.HasAttribute(System.Type,System.Type,System.Boolean)
  commentId: M:QFramework.ReflectionExtension.HasAttribute(System.Type,System.Type,System.Boolean)
  id: HasAttribute(System.Type,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: HasAttribute(Type, Type, Boolean)
  nameWithType: ReflectionExtension.HasAttribute(Type, Type, Boolean)
  fullName: QFramework.ReflectionExtension.HasAttribute(System.Type, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: HasAttribute
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 986
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n拥有特性\n"
  example: []
  syntax:
    content: public static bool HasAttribute(this Type type, Type attributeType, bool inherit)
    parameters:
    - id: type
      type: System.Type
    - id: attributeType
      type: System.Type
    - id: inherit
      type: System.Boolean
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasAttribute(type As Type, attributeType As Type, inherit As Boolean) As Boolean
  overload: QFramework.ReflectionExtension.HasAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: QFramework.ReflectionExtension.HasAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)
  commentId: M:QFramework.ReflectionExtension.HasAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)
  id: HasAttribute(System.Reflection.MethodInfo,System.Type,System.Boolean)
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: HasAttribute(MethodInfo, Type, Boolean)
  nameWithType: ReflectionExtension.HasAttribute(MethodInfo, Type, Boolean)
  fullName: QFramework.ReflectionExtension.HasAttribute(System.Reflection.MethodInfo, System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: HasAttribute
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 995
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n拥有特性\n"
  example: []
  syntax:
    content: public static bool HasAttribute(this MethodInfo method, Type attributeType, bool inherit)
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: attributeType
      type: System.Type
    - id: inherit
      type: System.Boolean
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function HasAttribute(method As MethodInfo, attributeType As Type, inherit As Boolean) As Boolean
  overload: QFramework.ReflectionExtension.HasAttribute*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: QFramework.ReflectionExtension.GetFirstAttribute``1(System.Reflection.MethodInfo,System.Boolean)
  commentId: M:QFramework.ReflectionExtension.GetFirstAttribute``1(System.Reflection.MethodInfo,System.Boolean)
  id: GetFirstAttribute``1(System.Reflection.MethodInfo,System.Boolean)
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: GetFirstAttribute<T>(MethodInfo, Boolean)
  nameWithType: ReflectionExtension.GetFirstAttribute<T>(MethodInfo, Boolean)
  fullName: QFramework.ReflectionExtension.GetFirstAttribute<T>(System.Reflection.MethodInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: GetFirstAttribute
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 1004
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n获取第一个特性\n"
  example: []
  syntax:
    content: >-
      public static T GetFirstAttribute<T>(this MethodInfo method, bool inherit)
          where T : Attribute
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
    - id: inherit
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFirstAttribute(Of T As Attribute)(method As MethodInfo, inherit As Boolean) As T
  overload: QFramework.ReflectionExtension.GetFirstAttribute*
  nameWithType.vb: ReflectionExtension.GetFirstAttribute(Of T)(MethodInfo, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: QFramework.ReflectionExtension.GetFirstAttribute(Of T)(System.Reflection.MethodInfo, System.Boolean)
  name.vb: GetFirstAttribute(Of T)(MethodInfo, Boolean)
- uid: QFramework.ReflectionExtension.GetFirstAttribute``1(System.Reflection.FieldInfo,System.Boolean)
  commentId: M:QFramework.ReflectionExtension.GetFirstAttribute``1(System.Reflection.FieldInfo,System.Boolean)
  id: GetFirstAttribute``1(System.Reflection.FieldInfo,System.Boolean)
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: GetFirstAttribute<T>(FieldInfo, Boolean)
  nameWithType: ReflectionExtension.GetFirstAttribute<T>(FieldInfo, Boolean)
  fullName: QFramework.ReflectionExtension.GetFirstAttribute<T>(System.Reflection.FieldInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: GetFirstAttribute
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 1015
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n获取第一个特性\n"
  example: []
  syntax:
    content: >-
      public static T GetFirstAttribute<T>(this FieldInfo field, bool inherit)
          where T : Attribute
    parameters:
    - id: field
      type: System.Reflection.FieldInfo
    - id: inherit
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFirstAttribute(Of T As Attribute)(field As FieldInfo, inherit As Boolean) As T
  overload: QFramework.ReflectionExtension.GetFirstAttribute*
  nameWithType.vb: ReflectionExtension.GetFirstAttribute(Of T)(FieldInfo, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: QFramework.ReflectionExtension.GetFirstAttribute(Of T)(System.Reflection.FieldInfo, System.Boolean)
  name.vb: GetFirstAttribute(Of T)(FieldInfo, Boolean)
- uid: QFramework.ReflectionExtension.GetFirstAttribute``1(System.Reflection.PropertyInfo,System.Boolean)
  commentId: M:QFramework.ReflectionExtension.GetFirstAttribute``1(System.Reflection.PropertyInfo,System.Boolean)
  id: GetFirstAttribute``1(System.Reflection.PropertyInfo,System.Boolean)
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: GetFirstAttribute<T>(PropertyInfo, Boolean)
  nameWithType: ReflectionExtension.GetFirstAttribute<T>(PropertyInfo, Boolean)
  fullName: QFramework.ReflectionExtension.GetFirstAttribute<T>(System.Reflection.PropertyInfo, System.Boolean)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: GetFirstAttribute
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 1026
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n获取第一个特性\n"
  example: []
  syntax:
    content: >-
      public static T GetFirstAttribute<T>(this PropertyInfo prop, bool inherit)
          where T : Attribute
    parameters:
    - id: prop
      type: System.Reflection.PropertyInfo
    - id: inherit
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFirstAttribute(Of T As Attribute)(prop As PropertyInfo, inherit As Boolean) As T
  overload: QFramework.ReflectionExtension.GetFirstAttribute*
  nameWithType.vb: ReflectionExtension.GetFirstAttribute(Of T)(PropertyInfo, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: QFramework.ReflectionExtension.GetFirstAttribute(Of T)(System.Reflection.PropertyInfo, System.Boolean)
  name.vb: GetFirstAttribute(Of T)(PropertyInfo, Boolean)
- uid: QFramework.ReflectionExtension.GetFirstAttribute``1(System.Type,System.Boolean)
  commentId: M:QFramework.ReflectionExtension.GetFirstAttribute``1(System.Type,System.Boolean)
  id: GetFirstAttribute``1(System.Type,System.Boolean)
  isExtensionMethod: true
  parent: QFramework.ReflectionExtension
  langs:
  - csharp
  - vb
  name: GetFirstAttribute<T>(Type, Boolean)
  nameWithType: ReflectionExtension.GetFirstAttribute<T>(Type, Boolean)
  fullName: QFramework.ReflectionExtension.GetFirstAttribute<T>(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
      branch: master
      repo: git@github.com:liangxiegame/QFramework.git
    id: GetFirstAttribute
    path: Assets/QFramework/Framework/0.Core/Core/DotNetExtensions.cs
    startLine: 1037
  assemblies:
  - QFramework.Core.DotNetExtensions
  namespace: QFramework
  summary: "\n获取第一个特性\n"
  example: []
  syntax:
    content: >-
      public static T GetFirstAttribute<T>(this Type type, bool inherit)
          where T : Attribute
    parameters:
    - id: type
      type: System.Type
    - id: inherit
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFirstAttribute(Of T As Attribute)(type As Type, inherit As Boolean) As T
  overload: QFramework.ReflectionExtension.GetFirstAttribute*
  nameWithType.vb: ReflectionExtension.GetFirstAttribute(Of T)(Type, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: QFramework.ReflectionExtension.GetFirstAttribute(Of T)(System.Type, System.Boolean)
  name.vb: GetFirstAttribute(Of T)(Type, Boolean)
references:
- uid: QFramework
  commentId: N:QFramework
  name: QFramework
  nameWithType: QFramework
  fullName: QFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: QFramework.ReflectionExtension.Example*
  commentId: Overload:QFramework.ReflectionExtension.Example
  name: Example
  nameWithType: ReflectionExtension.Example
  fullName: QFramework.ReflectionExtension.Example
- uid: QFramework.ReflectionExtension.GetAssemblyCSharp*
  commentId: Overload:QFramework.ReflectionExtension.GetAssemblyCSharp
  name: GetAssemblyCSharp
  nameWithType: ReflectionExtension.GetAssemblyCSharp
  fullName: QFramework.ReflectionExtension.GetAssemblyCSharp
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: true
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: QFramework.ReflectionExtension.GetAssemblyCSharpEditor*
  commentId: Overload:QFramework.ReflectionExtension.GetAssemblyCSharpEditor
  name: GetAssemblyCSharpEditor
  nameWithType: ReflectionExtension.GetAssemblyCSharpEditor
  fullName: QFramework.ReflectionExtension.GetAssemblyCSharpEditor
- uid: QFramework.ReflectionExtension.InvokeByReflect*
  commentId: Overload:QFramework.ReflectionExtension.InvokeByReflect
  name: InvokeByReflect
  nameWithType: ReflectionExtension.InvokeByReflect
  fullName: QFramework.ReflectionExtension.InvokeByReflect
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: QFramework.ReflectionExtension.GetFieldByReflect*
  commentId: Overload:QFramework.ReflectionExtension.GetFieldByReflect
  name: GetFieldByReflect
  nameWithType: ReflectionExtension.GetFieldByReflect
  fullName: QFramework.ReflectionExtension.GetFieldByReflect
- uid: QFramework.ReflectionExtension.GetPropertyByReflect*
  commentId: Overload:QFramework.ReflectionExtension.GetPropertyByReflect
  name: GetPropertyByReflect
  nameWithType: ReflectionExtension.GetPropertyByReflect
  fullName: QFramework.ReflectionExtension.GetPropertyByReflect
- uid: QFramework.ReflectionExtension.HasAttribute*
  commentId: Overload:QFramework.ReflectionExtension.HasAttribute
  name: HasAttribute
  nameWithType: ReflectionExtension.HasAttribute
  fullName: QFramework.ReflectionExtension.HasAttribute
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: QFramework.ReflectionExtension.GetFirstAttribute*
  commentId: Overload:QFramework.ReflectionExtension.GetFirstAttribute
  name: GetFirstAttribute
  nameWithType: ReflectionExtension.GetFirstAttribute
  fullName: QFramework.ReflectionExtension.GetFirstAttribute
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
